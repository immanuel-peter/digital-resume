diff --git a/app/api/chat/route.ts b/app/api/chat/route.ts
index efd6ef8..f147c18 100644
--- a/app/api/chat/route.ts
+++ b/app/api/chat/route.ts
@@ -1,5 +1,6 @@
 import { NextResponse } from "next/server";
 import OpenAI from "openai";
+import { biography } from "../../../public/biography";
 
 const openai = new OpenAI({
   apiKey: process.env.OPENAI_API_KEY,
@@ -7,17 +8,76 @@ const openai = new OpenAI({
 
 export async function POST(req: Request) {
   try {
-    const { messages } = await req.json();
+    const { messages, previous_response_id } = await req.json();
 
-    const response = await openai.chat.completions.create({
-      model: "gpt-5-nano",
-      messages,
-      reasoning_effort: "low",
-    });
+    const input = (Array.isArray(messages) ? messages : [])
+      .filter((m) => m && m.role === "user")
+      .map((m) => ({
+        role: "user" as const,
+        content: [
+          {
+            type: "input_text" as const,
+            text: typeof m.content === "string" ? m.content : String(m.content ?? ""),
+          },
+        ],
+      }));
+
+    const createPayload: any = {
+      model: "gpt-5",
+      store: true,
+      include: ["reasoning.encrypted_content", "web_search_call.action.sources"],
+      reasoning: { effort: "low", summary: "auto" },
+      instructions: biography,
+      tool_choice: "auto",
+      tools: [
+        {
+          type: "web_search",
+          filters: {
+            allowed_domains: [
+              "github.com",
+              "huggingface.co",
+              "ipeter.dev",
+              "linkedin.com",
+              "raw.githubusercontent.com",
+              "uchicago.box.com",
+            ],
+          },
+        },
+      ],
+      input,
+    };
+
+    if (previous_response_id) {
+      createPayload.previous_response_id = previous_response_id;
+    }
+
+    const response = await openai.responses.create(createPayload);
 
-    const assistantMessage = response.choices[0].message;
+    const getReasoningText = async (response: any) => {
+      const output = response.output;
+      for (const part of output) {
+        if (part.type === "reasoning") {
+          if (part.summary) {
+            for (const summary of part.summary) {
+              if (summary.text) {
+                return summary.text;
+              }
+            }
+          }
+        }
+      }
+      return null;
+    };
 
-    return NextResponse.json(assistantMessage);
+    const reasoning_text = await getReasoningText(response);
+
+    console.log(response);
+
+    return NextResponse.json({
+      output_text: response.output_text,
+      response_id: response.id,
+      reasoning_text: reasoning_text,
+    });
   } catch (error) {
     console.error("Error in chat API:", error);
     return NextResponse.json(
diff --git a/components/ImmanuelAI.tsx b/components/ImmanuelAI.tsx
index 68607c6..2475917 100644
--- a/components/ImmanuelAI.tsx
+++ b/components/ImmanuelAI.tsx
@@ -7,17 +7,18 @@ import {
   DialogPanel,
   DialogTitle,
 } from "@headlessui/react";
-import { biography } from "../public/biography";
 import ReactMarkdown from "react-markdown";
 
+type ChatMessage = { role: string; content: string; reasoning?: string };
+
 const ImmanuelAI = () => {
   const [isOpen, setIsOpen] = useState(false);
-  const initMessages = [{ role: "developer", content: biography }];
-  const [messages, setMessages] = useState(initMessages);
+  const [messages, setMessages] = useState<ChatMessage[]>([]);
   const [userInput, setUserInput] = useState("");
   const [loading, setLoading] = useState(false);
   const messagesEndRef = useRef<HTMLDivElement>(null);
   const isComposingRef = useRef(false);
+  const [previousResponseId, setPreviousResponseId] = useState<string | null>(null);
 
   const openDialog = () => setIsOpen(true);
   const closeDialog = () => setIsOpen(false);
@@ -27,7 +28,7 @@ const ImmanuelAI = () => {
     if (userInput.trim() === "") return;
 
     // Create a new messages array with the user message
-    const newMessages = [...messages, { role: "user", content: userInput }];
+    const newMessages: ChatMessage[] = [...messages, { role: "user", content: userInput }];
 
     // Add user message
     setMessages(newMessages);
@@ -40,7 +41,10 @@ const ImmanuelAI = () => {
         headers: {
           "Content-Type": "application/json",
         },
-        body: JSON.stringify({ messages: newMessages }),
+        body: JSON.stringify({
+          messages: newMessages,
+          previous_response_id: previousResponseId,
+        }),
       });
 
       if (!response.ok) {
@@ -49,15 +53,20 @@ const ImmanuelAI = () => {
 
       const data = await response.json();
 
-      // Add bot response
+      // Persist response id for follow-up turns
+      if (data?.response_id) {
+        setPreviousResponseId(data.response_id as string);
+      }
+
       setMessages((prev) => [
         ...prev,
         {
           role: "assistant",
-          content: data.content,
+          content: data.output_text ?? "",
+          reasoning: data?.reasoning_text || undefined,
         },
       ]);
-      console.log(data.content);
+      console.log(data.reasoning_text);
     } catch (error) {
       console.error("Error fetching response:", error);
       setMessages((prev) => [
@@ -109,9 +118,7 @@ const ImmanuelAI = () => {
 
             {/* Chat Messages */}
             <div className="mt-4 h-80 overflow-y-auto border border-gray-300 dark:border-gray-600 rounded-md p-2">
-              {messages
-                .filter((msg) => msg.role !== "developer")
-                .map((msg, index) => (
+              {messages.map((msg, index) => (
                   <div
                     key={index}
                     className={`mb-2 p-2 rounded-md ${
@@ -121,9 +128,22 @@ const ImmanuelAI = () => {
                     }`}
                   >
                     {msg.role === "assistant" ? (
-                      <div className="prose prose-md dark:prose-invert">
-                        <ReactMarkdown>{msg.content}</ReactMarkdown>
-                      </div>
+                      <>
+                        {msg.reasoning && (
+                          <details className="mt-2">
+                            <summary className="cursor-pointer select-none text-sm text-gray-600 dark:text-gray-300">
+                              Show reasoning
+                            </summary>
+                            <div className="mt-1 px-2 prose dark:prose-invert text-sm italic text-gray-700 dark:text-gray-300">
+                              <ReactMarkdown>{msg.reasoning}</ReactMarkdown>
+                            </div>
+                          </details>
+                        )}
+                      
+                        <div className="mt-2 prose prose-md dark:prose-invert">
+                          <ReactMarkdown>{msg.content}</ReactMarkdown>
+                        </div>                        
+                      </>
                     ) : (
                       msg.content
                     )}
diff --git a/package-lock.json b/package-lock.json
index 07b9701..22a91e7 100644
--- a/package-lock.json
+++ b/package-lock.json
@@ -14,7 +14,7 @@
         "@vercel/analytics": "^1.5.0",
         "ai": "^5.0.14",
         "next": "15.3.3",
-        "openai": "^5.0.2",
+        "openai": "^5.20.0",
         "react": "^19.0.0",
         "react-dom": "^19.0.0",
         "react-icons": "^5.5.0",
@@ -2778,9 +2778,10 @@
       }
     },
     "node_modules/openai": {
-      "version": "5.0.2",
-      "resolved": "https://registry.npmjs.org/openai/-/openai-5.0.2.tgz",
-      "integrity": "sha512-NN7LAAImgBmd4RIe6WyRpLmwCbn+HQ1iaXeIG7K9DM3Auy/G2waKFhrDfRgaEeY0UUPnm6nohaCsqcS+zO8+2g==",
+      "version": "5.20.0",
+      "resolved": "https://registry.npmjs.org/openai/-/openai-5.20.0.tgz",
+      "integrity": "sha512-Bmc2zLM/YWgFrDpXr9hwXqGGDdMmMpE9+qoZPsaHpn0Y/Qk1Vu26hNqXo7+nHdli+sLsXINvS1f8kR3NKhGKmA==",
+      "license": "Apache-2.0",
       "bin": {
         "openai": "bin/cli"
       },
diff --git a/package.json b/package.json
index c851bb1..654c73d 100644
--- a/package.json
+++ b/package.json
@@ -15,7 +15,7 @@
     "@vercel/analytics": "^1.5.0",
     "ai": "^5.0.14",
     "next": "15.3.3",
-    "openai": "^5.0.2",
+    "openai": "^5.20.0",
     "react": "^19.0.0",
     "react-dom": "^19.0.0",
     "react-icons": "^5.5.0",
